import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "bluetoothbaseclass.h"
        name: "BluetoothBaseClass"
        accessSemantics: "reference"
        prototype: "QObject"
        Property {
            name: "error"
            type: "QString"
            read: "error"
            write: "setError"
            notify: "errorChanged"
            index: 0
        }
        Property {
            name: "info"
            type: "QString"
            read: "info"
            write: "setInfo"
            notify: "infoChanged"
            index: 1
        }
        Signal { name: "errorChanged" }
        Signal { name: "infoChanged" }
    }
    Component {
        file: "connectionhandler.h"
        name: "ConnectionHandler"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["HeartRateGame/ConnectionHandler 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "alive"
            type: "bool"
            read: "alive"
            notify: "deviceChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "name"
            type: "QString"
            read: "name"
            notify: "deviceChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "address"
            type: "QString"
            read: "address"
            notify: "deviceChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "requiresAddressType"
            type: "bool"
            read: "requiresAddressType"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Signal { name: "deviceChanged" }
        Method {
            name: "hostModeChanged"
            Parameter { name: "mode"; type: "QBluetoothLocalDevice::HostMode" }
        }
    }
    Component {
        file: "devicefinder.h"
        name: "DeviceFinder"
        accessSemantics: "reference"
        prototype: "BluetoothBaseClass"
        exports: ["HeartRateGame/DeviceFinder 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "scanning"
            type: "bool"
            read: "scanning"
            notify: "scanningChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "devices"
            type: "QVariant"
            read: "devices"
            notify: "devicesChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "scanningChanged" }
        Signal { name: "devicesChanged" }
        Method { name: "startSearch" }
        Method {
            name: "connectToService"
            Parameter { name: "address"; type: "QString" }
        }
        Method {
            name: "addDevice"
            Parameter { name: "device"; type: "QBluetoothDeviceInfo" }
        }
        Method {
            name: "scanError"
            Parameter { name: "error"; type: "QBluetoothDeviceDiscoveryAgent::Error" }
        }
        Method { name: "scanFinished" }
    }
    Component {
        file: "devicehandler.h"
        name: "DeviceHandler"
        accessSemantics: "reference"
        prototype: "BluetoothBaseClass"
        exports: ["HeartRateGame/DeviceHandler 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "AddressType"
            values: ["PublicAddress", "RandomAddress"]
        }
        Property {
            name: "measuring"
            type: "bool"
            read: "measuring"
            notify: "measuringChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "alive"
            type: "bool"
            read: "alive"
            notify: "aliveChanged"
            index: 1
            isReadonly: true
        }
        Property { name: "hr"; type: "int"; read: "hr"; notify: "statsChanged"; index: 2; isReadonly: true }
        Property {
            name: "maxHR"
            type: "int"
            read: "maxHR"
            notify: "statsChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "minHR"
            type: "int"
            read: "minHR"
            notify: "statsChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "average"
            type: "float"
            read: "average"
            notify: "statsChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "time"
            type: "int"
            read: "time"
            notify: "statsChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "calories"
            type: "float"
            read: "calories"
            notify: "statsChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "addressType"
            type: "AddressType"
            read: "addressType"
            write: "setAddressType"
            index: 8
        }
        Signal { name: "measuringChanged" }
        Signal { name: "aliveChanged" }
        Signal { name: "statsChanged" }
        Method { name: "startMeasurement" }
        Method { name: "stopMeasurement" }
        Method { name: "disconnectService" }
        Method { name: "moveForword" }
        Method { name: "moveBackword" }
    }
}
